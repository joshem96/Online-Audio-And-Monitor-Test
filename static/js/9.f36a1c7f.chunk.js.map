{"version":3,"sources":["Components/workSpaceComps/Vision/Vision_Solid_Option.js"],"names":["freeze","Vision_Solid","props","state","fsConfig","console","log","fsMdeTrgr","document","querySelector","addEventListener","timer","setInterval","window","safari","alert","fullscreenFunct","setTimeout","ifFsExited","innerHeight","screen","height","clearInterval","colorArray","cntr","className","onClick","style","background","length","backgroundColor","React","Component"],"mappings":"oMAIIA,GAAS,EACPC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,gEASd,IAAIC,EAAW,CAAED,MAAO,OACxBE,QAAQC,IAAI,mBAAqBF,EAASD,OAC1C,IAAII,EAAY,GAGhBC,SAASC,cAAc,eAAeC,iBAAiB,aAAa,WAClEL,QAAQC,IAAI,cAEZ,IAAIK,EAAQ,EACZJ,EAAYK,aAAY,WAET,MADbD,IAEKE,OAAOC,QAASC,MAAM,4HAGH,OAAlBX,EAASD,OACXE,QAAQC,IAAI,6BACZU,YAAgBR,SAASC,cAAc,gBAAiBL,EAASD,MAAQ,KAGzEc,YAAW,WACT,IAAIC,EAAaN,aAAY,WAExBC,OAAOM,aAAeN,OAAOO,OAAOC,SACrChB,QAAQC,IAAI,4BACZF,EAASD,MAAQ,MACjBmB,cAAcJ,MAEf,MACF,MAGqB,MAAjBd,EAASD,OAAgBa,YAAgBR,SAASC,cAAc,gBAEzET,GAAS,KAEV,QAILQ,SAASC,cAAc,eAAeC,iBAAiB,WAAW,WAChEY,cAAcf,GACdU,YAAW,WAAqB,GAAVjB,IAAgBA,GAAS,KAAU,U,+BAUzD,IAAIuB,EAAa,CAAC,SAAS,OAAO,aAAa,OAAO,MAAM,SAAS,OAAO,QAAQ,SAChFC,EAAO,EAqBf,OAdGhB,SAASC,cAAc,eAetB,8BACI,qBAAKgB,UAAU,+DAAf,SACE,qBAAKA,UAAU,aAAaC,QAAS,WAXJ,GAAV1B,IAC7BQ,SAASC,cAAc,eAAekB,MAAMC,WAAaL,EAAWC,KACpEA,GACWD,EAAWM,SAAQL,EAAO,KAQ4BG,MAAO,CAACG,gBAAiB,mB,GAvFzEC,IAAMC,WAgGhB/B","file":"static/js/9.f36a1c7f.chunk.js","sourcesContent":["import React from 'react'\nimport {fullscreenFunct} from '../../Tools/codeTools'\n\n\nvar freeze = false;\nclass Vision_Solid extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    componentDidMount(){\n        //HOLD MOUSE DOWN FOR 2 SECONDS TO ENTER FULLSCREEN MODE FUNCTIONALITY\n\n        //init config\n        var fsConfig = { state: \"off\" }\n        console.log(\"dbl click method\" + fsConfig.state)\n        var fsMdeTrgr = '';\n\n        //functionality\n        document.querySelector(\".solid-node\").addEventListener(\"mousedown\", () => {\n          console.log(\"mouse down\")\n          //mousedown, once held down for 2 seconds, enter full screen mode, freeze = true so color doesnt change, 500ms later freeze = false\n          var timer = 0;\n          fsMdeTrgr = setInterval(() => {\n            timer++\n            if(timer === 3) { \n              if(window.safari){ alert(\"Unfortunately fullscreen solid color mode doesn't work in safari. Please us another modern browser for this feature. :-)\")}\n              debugger;\n              //Fullscreen function (was orignally a function FYI)\n              if (fsConfig.state == \"off\") {\n                console.log(\"entering full screen mode\")\n                fullscreenFunct(document.querySelector(\".solid-node\")); fsConfig.state = \"on\";\n  \n                //once user has entered fs mode, constantly check for if the user has exited fullscreen mode, if so  set fsConfig.state = \"off\"\n                setTimeout(() => {\n                  var ifFsExited = setInterval(() => {\n                    debugger;\n                    if(window.innerHeight != window.screen.height) {\n                      console.log(\"exiting full screen mode\")\n                      fsConfig.state = \"off\"; \n                      clearInterval(ifFsExited)\n                    } \n                  }, 20);\n                }, 5000);\n  \n              } //turn fs on if its off \n              else if (fsConfig.state ==\"on\") { fullscreenFunct(document.querySelector(\".solid-node\")) /*fsConfig.state = \"off\"*/ } //turn fs off if its on\n\n              freeze = true;\n            }\n          }, 500);\n\n      });\n\n        document.querySelector(\".solid-node\").addEventListener(\"mouseup\", () => {\n          clearInterval(fsMdeTrgr);\n          setTimeout(() => { if(freeze == true) freeze = false; }, 500);\n        });\n    }\n\n\n    render() {\n    //COLOR TOGGLE\n      //each \"click\" will show a new colour by sorting through an array, using an integret, when it hits a certain number, the integer goes back to 0 \n      \n      //solidClrNode.addEventListener(\"click\", solidClrSort ) \n          var colorArray = [\"yellow\",\"cyan\",\"lightgreen\",\"pink\",\"red\",\"purple\",\"grey\",\"black\",\"white\"];\n          var cntr = 0;\n\n      //change color by selecting an array item with current counter value, once counter exceeds the colorArray.length, reset counter to 0\n      var dblClickCntr = 0;\n      //var freeze = false;\n      var prvDbl = 0;\n\n      if(document.querySelector(\".solid-node\")){\n\n      }\n\n      function solidClrSort(){\n   \n        if(/*userDblClkd != true && */ freeze == false /* && hasBeenDblClkd == false*/ ){\n          document.querySelector(\".solid-node\").style.background = colorArray[cntr];\n          cntr++\n          if(cntr >= colorArray.length) cntr = 0; // so once colorArray becomes +1 of the colorArray.length, reset cntr\n        }\n\n      }\n\n      return (\n          <div>\n              <div className=\"vision-solid-wrap vision-tool tool-element-wrap display-none\">\n                <div className=\"solid-node\" onClick={() => solidClrSort()} style={{backgroundColor: \"white\", /*zIndex: 1000*/} }></div>\n              </div>\n          </div>\n      );\n    }\n  }\n\n\n\n  export default Vision_Solid"],"sourceRoot":""}