{"version":3,"sources":["Components/workSpaceComps/AV/AV_FreqSweep_Option.js","Components/workSpaceComps/AV/AV_LR_Option.js","Components/workSpaceComps/AV/AV_MusicVid_Option.js","Components/workSpaceComps/AV/AV_Sync_Option.js","Components/workSpaceComps/AV/AV_WS.js"],"names":["AV_FreqSweep","props","state","className","width","height","src","srcdoc","title","frameborder","allow","allowfullscreen","mozallowfullscreen","msallowfullscreen","oallowfullscreen","webkitallowfullscreen","loading","React","Component","AV_LR","allowFullScreen","AV_MusicVid","AV_Sync","AVWorkSpace","initYtClientCheck","trgrYtClientSize","checkYtClientSize","setInterval","document","querySelector","clearInterval","checkYtSize","clientHeight","window","innerHeight","classList","contains","remove","add","console","log","getElementsByClassName","addEventListener","aria-label"],"mappings":"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","file":"static/js/5.cbdb4e5e.chunk.js","sourcesContent":["import React from 'react'\n\nclass AV_FreqSweep extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    render() {\n\n      return (\n          <div>\n              <div className=\"av-tool-wrap AV-freqsweep-wrap tool-element-wrap display-none\">\n                <div className=\"iframe-container\">\n                  <iframe className=\"av-tool yt-vid freqsweep\" width=\"966\" height=\"543\" src=\"https://www.youtube.com/embed/qNf9nzvnd1k\"\n                   srcdoc=\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/qNf9nzvnd1k?autoplay=1><img src=https://img.youtube.com/vi/qNf9nzvnd1k/hqdefault.jpg alt='Music video'><span>▶</span></a>\"\n                   title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullScreen;\" \n                   allowfullscreen=\"allowfullscreen\"\n                   mozallowfullscreen=\"mozallowfullscreen\" \n                   msallowfullscreen=\"msallowfullscreen\" \n                   oallowfullscreen=\"oallowfullscreen\" \n                   webkitallowfullscreen=\"webkitallowfullscreen\" loading=\"lazy\">\n                  </iframe>\n                </div>\n              </div>\n          </div>\n      );\n    }\n  }\n\n  export {AV_FreqSweep}","import React from 'react'\n\nclass AV_LR extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    render() {\n        \n      return (\n          <div>\n              <div className=\"av-tool-wrap AV-LR-wrap tool-element-wrap display-none\" >\n                <div className=\"iframe-container\">\n                  <iframe className=\"av-tool yt-vid leftright\" width=\"966\" height=\"543\" src=\"https://www.youtube.com/embed/hTvJoYnpeRQ\"\n                  srcdoc=\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/hTvJoYnpeRQ?autoplay=1><img src=https://img.youtube.com/vi/hTvJoYnpeRQ/hqdefault.jpg alt='Music video'><span>▶</span></a>\"\n                  title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullScreen;\"  loading=\"lazy\"\n                  allowfullscreen=\"allowfullscreen\"\n                  mozallowfullscreen=\"mozallowfullscreen\" \n                  msallowfullscreen=\"msallowfullscreen\" \n                  oallowfullscreen=\"oallowfullscreen\" \n                  webkitallowfullscreen=\"webkitallowfullscreen\"  \n                  allowFullScreen=\"true\">\n                  </iframe>\n                </div>\n              </div>\n          </div>\n      );\n    }\n  }\n\n  export {AV_LR}\n\n","import React from 'react'\n\nclass AV_MusicVid extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    render() {\n        \n      return (\n          <div>\n              <div className=\"av-tool-wrap AV-musicvid-wrap tool-element-wrap display-none\">\n                <div className=\"iframe-container\">\n                  <iframe className=\"av-tool yt-vid musicvid\" width=\"966\" height=\"543\" src=\"https://www.youtube.com/embed/CSvFpBOe8eY\" srcdoc=\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/CSvFpBOe8eY?autoplay=1><img src=https://img.youtube.com/vi/CSvFpBOe8eY/hqdefault.jpg alt='Music video'><span>▶</span></a>\"\n                  title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullScreen;\"\n                  allowfullscreen=\"allowfullscreen\"\n                  mozallowfullscreen=\"mozallowfullscreen\" \n                  msallowfullscreen=\"msallowfullscreen\" \n                  oallowfullscreen=\"oallowfullscreen\" \n                  webkitallowfullscreen=\"webkitallowfullscreen\" loading=\"lazy\">\n                  </iframe>\n                </div>\n              </div>\n          </div>\n      );\n    }\n  }\n\n  export {AV_MusicVid}\n\n","import React from 'react'\n\nclass AV_Sync extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    render() {\n        \n      return (\n          <div>\n              <div className=\"av-tool-wrap AV-sync-wrap tool-element-wrap display-none\" >\n                <div className=\"iframe-container\">\n                  <iframe className=\"av-tool yt-vid sync\" width=\"966\" height=\"543\" src=\"https://www.youtube.com/embed/ucZl6vQ_8Uo\" \n                  srcdoc=\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/ucZl6vQ_8Uo?autoplay=1><img src=https://img.youtube.com/vi/ucZl6vQ_8Uo/hqdefault.jpg alt='Music video'><span>▶</span></a>\"\n                  title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullScreen;\" \n                  allowfullscreen=\"allowfullscreen\"\n                  mozallowfullscreen=\"mozallowfullscreen\" \n                  msallowfullscreen=\"msallowfullscreen\" \n                  oallowfullscreen=\"oallowfullscreen\" \n                  webkitallowfullscreen=\"webkitallowfullscreen\" loading=\"lazy\">\n                  </iframe>\n                </div>\n              </div>\n          </div>\n      );\n    }\n  }\n\n  export {AV_Sync}\n\n  ","import React from 'react'\nimport { AV_FreqSweep } from './AV_FreqSweep_Option';\nimport { AV_LR } from './AV_LR_Option';\nimport { AV_MusicVid } from './AV_MusicVid_Option';\nimport { AV_Sync } from './AV_Sync_Option';\n\nclass AVWorkSpace extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = { }\n    }\n\n    componentDidMount(){\n      var initYtClientCheck = '';\n      var trgrYtClientSize = '';\n      \n      function checkYtClientSize(){\n          \n            initYtClientCheck = setInterval(() => {\n\n            if(document.querySelector(\"iframe.on\")){ // waituntil iframe has loaded content\n\n              clearInterval(initYtClientCheck); clearInterval(trgrYtClientSize); \n              \n              var checkYtSize = setInterval(() => {\n                switch(document.querySelector(\"iframe.on\") !== null){ //check if youtube videos are still being watched\n                  case true: //if youtube videos are being watch, listen for if fullscreen mode has been enabled\n                  if(document.querySelector(\"iframe.on\").clientHeight === window.innerHeight && document.querySelector(\"iframe.on\").classList.contains(\"av-tool\")){ \n                    document.querySelector(\"iframe.on\").classList.remove(\"av-tool\"); //if the youtubeClient.width == window.width, remove center styling\n                  }\n                  else if(document.querySelector(\"iframe.on\").clientHeight !== window.innerHeight && !document.querySelector(\"iframe.on\").classList.contains(\"av-tool\")){\n                    document.querySelector(\"iframe.on\").classList.add(\"av-tool\"); //!if the youtubeClient.width == window.width, enable center styling\n                  }\n                  break;\n                  case false: //if youtube videos have stopped being watched, stop listening (clearInterval)\n                    clearInterval(checkYtSize); console.log(\"client closed\")\n                  break;\n                  default: //clearInterval(checkYtSize); break;\n                } }, 100);\n            }\n          }, 20);\n      }\n\n      checkYtClientSize(); \n\n      //runs above function again when user re-navigates back into AV after having been there already (as it stops checking once user leaves the AV section)\n      document.getElementsByClassName(\"Audio&Vision\")[0].addEventListener(\"click\", () => {\n        trgrYtClientSize = setInterval(() => { //listen for if user moves from browsing state to viewing a yt video\n          console.log(\"checking to see if this works\");\n          if(document.getElementsByClassName(\"Audio&Vision\")[0].classList.contains(\"selected\")){\n            checkYtClientSize(); console.log(\"checking client size\");\n          }\n          else if (document.getElementsByClassName(\"Audio&Vision\")[0].classList.contains(\"unselected\")){\n            clearInterval(initYtClientCheck); clearInterval(trgrYtClientSize); \n          }\n        }, 20);\n      });\n    }\n\n    render() {\n\n      return (\n          <div>\n              <div className=\"AV-WS-Wrap\" aria-label=\"youtube videos\">\n                <AV_Sync/>\n                <AV_FreqSweep/>\n                <AV_MusicVid/>\n                <AV_LR/>\n              </div>\n          </div>\n      );\n    }\n  }\n\n  export default AVWorkSpace\n\n\n"],"sourceRoot":""}